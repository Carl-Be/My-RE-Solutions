Q1: This program requires a password. Find it.
A1: ~~~~

Q2: By the way, multiple passwords may work. Try to find them.
A2: 504/n (ascii chars only no whitespace)
    pass1 = ~~~~
    pass2 = TTTTTT
    pass3 = HHHHHHH
    pass4 = ????????
    pass5 = 888888888
    pass6 = ************
    pass7 = $$$$$$$$$$$$$$

    

Q3: As an additional exercise, try to change the password by patching the executable file.
A3:


NOTES:
==========================================================================================================================================
This cmp is interesing. its a 1 byte value being cmp to a dereferenced 1 byte value. 
The following shows the code snipets of the disasembler / c code. 90% sure the password 
im looking for a 1 byte value 

0x0000140e	0x0040300e	0x3a,0x0a	cmp	cl,byte ptr [edx]
-------------------------------------
printf("enter password: ");
scanf(%s, edx);

if([edx] != cl){
  wrong password
}
--------------------------------------

CodeBrowser 
---------------------------------------------------------------------------------------------------------------------------

undefined4 main(void)

{
  int argc;
  char *charPtr;
  char userInputByte;
  char stringBuf [127];
  
  printf(s_enter_password:_00403000);
                    /* If userInputByte is successfully read set argc to 1. 
                       NOTE: scanf returns the amount of successful arguments read.  */
  argc = scanf(&DAT_00403014,&userInputByte);
  if (argc != 1) {
    printf(s_no_password_supplied_00403018);
  }
  argc = 0;
  charPtr = &userInputByte;
  if (userInputByte != '\0') {
    do {
                    /* !!!! Sums the total of argc !!!!
                       !!!! If argc = 504 by the time stringBuf !!!! 
                       !!!! hits 0x00 i've found the password !!!!
                       !!!! 504/n will get me any passwords that are made of ASCII CHARS !!!! */
      charPtr = charPtr + 1;
      argc = argc + userInputByte;
      userInputByte = *charPtr;
                    /* This while loop keeps on going until 
                       charPtr hits a 0x00 in memory. */
    } while (userInputByte != '\0');
                    /* 0x1f8 = 504 (Base10) */
    if (argc == 0x1f8) {
      printf(s_password_is_correct_00403030);
      return 0;
    }
  }
  printf(s_password_is_not_correct_00403048);
  return 0;
}


==========================================================================================================================================
